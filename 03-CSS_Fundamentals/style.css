h1{
  color: red;
  font-size: 26px;
  
  text-transform: uppercase;
  /* converts all the letters into alphabets */
  font-style: italic;
}
/* we can create a list of css selectors which have the same css properties and values and we can group them together  */
h1,h2,h3,h4,li,p{
  font-family: sans-serif;
}


h2{
  font-size: 40px;
  
}

p{
  font-size: 22px;
  line-height: 1.5;
  
}

h3{
  font-size: 30px;
  
}

h4{

  font-size: 20px;
  
  text-transform: uppercase;
  text-align: center;

}

li{
  /* here we style the li ie list items not the parent elements like ul or ol  */
 
  /* by default the font-size is 16px as per the browser default settings */
  font-size:20px ;

}

/* by convention the text in the footer section needs to be smaller than the rest of the text in the website or in the document  */
footer p{
  font-size: 16px;
}
/* this way of writing css selectors is known as descendant selectors as the p elements are the children elements of the footer element  */

/* for testing purpose */

/* article header p{
  font-style: italic;
} */

/* not needed */

/* this is not a good robust approach to  */
/* this is known as nested descendant selectors  */
/* we are now encoding more and more html elements in the css 
it is not a good way to write css as if we may the html it will be a problem  */

#author{
  font-style: italic;
  font-size: 18px;

}

/*  # is used for id selector  */

/* we can also assign the elements via classes  */
/* the main difference between id and classes is that we can repeat classes 
whereas in case of id we cannot - ids are used for unique elements only 
whereas when we need to group elements we use classes  */

#copyright{
  font-size: 16px;
  text-align: center;
}

.related_author{
  font-size: 18px;
  font-weight:bold;
}
/* Now the question may come to our mind that we have defined many css rules
so which one will be applied - the short answer is all the css rules will be applied 

PS we will be learning that in the next video :) */

.related{
  list-style: none;
  
}

/* why we rarely use ids and often use classes 
the reason is that ids can be used for only one element wherease we can use 
classes for many different elements . 
and by doing that we are making our code future proof so that whenever we 
want to add something similar to that we can just use the class attribute and put 
the same name and in this way the same styling will be added  */